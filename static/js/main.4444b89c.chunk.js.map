{"version":3,"sources":["components/Titles.jsx","components/Form.jsx","components/Weather.jsx","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","required","Weather","city","country","temperature","humidity","description","error","App","state","undefined","_callee","e","weather_api_call","weather_json_data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","stop","Titles_Titles","Form_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4444b89c.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Titles extends React.Component {\n\n    render() {\n        return (\n            <div>\n                <h1 className=\"title-container__title\">Get Weather Updates</h1>\n                <h3 className=\"title-container__subtitle\">Find Out temprature, conditions and more...</h3>\n            </div>\n        );\n    }\n}","import React from 'react';\n\nexport default class Form extends React.Component {\n    \n    render() {\n        return (\n            <form onSubmit={this.props.getWeather}>\n                <input type=\"text\" name=\"city\" placeholder=\"City...\" required/>\n                <input type=\"text\" name=\"country\" placeholder=\"Country...\" required/>\n                <button>Get Weather</button>\n            </form>\n        \n        );\n    }\n}","import React from 'react';\n\nconst Weather = props => (\n    <div className=\"weather__info\">\n        {\n            props.city && props.country && \n            <p className=\"weather__key\">Location: \n                <span className=\"weather__value\"> {props.city}, {props.country}</span>\n            </p>\n        }\n        {\n            props.temperature && \n            <p className=\"weather__key\">Temperature: \n                <span className=\"weather__value\"> {props.temperature}</span>\n            </p>\n        }\n        {\n            props.humidity && \n            <p className=\"weather__key\">Humidity: \n                <span className=\"weather__value\"> {props.humidity}</span>\n            </p>\n        }\n        {\n            props.description && \n            <p className=\"weather__key\">Description: \n                <span className=\"weather__value\"> {props.description}</span>\n            </p>\n        }\n        {\n            props.error && \n            <p className=\"weather__key\">Error: \n                <span className=\"weather__value\"> {props.error}</span>\n            </p>\n        }\n    </div>\n);\nexport default Weather;","import React, { Component } from 'react';\n\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\n\n\n\nclass App extends Component {\n\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  };\n\n  getWeather = async (e) => {\n\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    //const apiKey = process.env.REACT_APP_WEATHER_API_KEY;\n    const apiKey = '5b74970fe90df513fae5a38d33db56cf';\n\n    const weather_api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${apiKey}&units=metric`);\n    //console.log(weather_api_call)\n      const weather_json_data = await weather_api_call.json();\n      if (city && country) {\n        this.setState({\n          temperature: weather_json_data.main.temp,\n          city: weather_json_data.name,\n          country: weather_json_data.sys.country,\n          humidity: weather_json_data.main.humidity,\n          description: weather_json_data.weather[0].description,\n          error: \"\"\n        });\n      } \n      else {\n        this.setState({\n          temperature: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          error: \"Please enter the values.\"\n        });\n    \n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                    <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather}/>\n                  <Weather \n                    temperature = {this.state.temperature}\n                    city = {this.state.city}\n                    country = {this.state.country}\n                    humidity = {this.state.humidity}\n                    description = {this.state.description}\n                    error = {this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}